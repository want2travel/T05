실행하기 전 해야 할 것
npm install (express, nodemon, node, express-session, bcryptjs, sequelize, body-parser, passport, passport-local)

실행 과정:
각 파일의 역할과 활용
app.js:

역할: Express 서버를 설정하고 실행하는 메인 파일입니다. 이 파일에서 서버의 포트를 지정하고, 미들웨어를 설정하고, 라우트 핸들러를 정의합니다.
활용: 서버를 시작할 때 이 파일을 실행합니다. Node.js 환경에서 node app.js 또는 Nodemon을 사용하여 nodemon app.js로 실행할 수 있습니다. 이 파일에서 다른 모듈(passport.js, register.js 등)을 import하여 사용합니다.
passport.js:

역할: 사용자 인증을 처리하는 Passport 설정 파일입니다. passport-local 전략을 사용하여 사용자를 인증합니다.
활용: passport.js 파일은 app.js에서 import되고 초기화됩니다. 사용자는 로그인 시 이 파일에서 정의된 인증 로직을 통해 검증됩니다. 인증 성공 시 사용자 정보가 세션에 저장됩니다.
register.js:

역할: 회원가입을 처리하는 라우트 파일입니다. 사용자 데이터를 받고 비밀번호를 해싱한 후, 데이터베이스에 새 사용자로 저장합니다.
활용: app.js에서 이 파일을 import하고 특정 라우트('/api/register')에 연결합니다. 클라이언트가 회원가입 폼을 제출할 때 이 라우트로 POST 요청을 보내면, 이 파일에서 요청을 처리합니다.
UserData.js:

역할: 사용자 모델과 데이터베이스 설정을 정의하는 파일입니다. Sequelize를 사용하여 MySQL 데이터베이스와 상호작용합니다.
활용: 사용자 정보를 데이터베이스에 저장하거나 검색할 때 사용합니다. 이 파일은 register.js와 passport.js에서 import되어 사용자 생성과 인증에 사용됩니다.

그러니까 주연누나 코드에 이 주소를 박으라고 해놔야지.
action="http://192.168.1.100:3000/api/register": 이 속성은 사용자가 폼을 제출할 때 데이터를 보낼 서버의 URL을 지정합니다. 여기서는 http://192.168.1.100:3000/api/register로 POST 요청을 보냅니다.

///////////////////헷갈려서 gpt에 물어봄.
회원가입과 로그인 구현 방식, 두 접근 방식의 차이
회원가입:

라우터: express.Router()를 사용하여 /api/register 경로에 대한 POST 요청을 처리합니다.
처리: 사용자 정보를 데이터베이스에 저장하고 응답을 반환합니다.
///
로그인:

미들웨어: Passport의 인증 미들웨어를 사용하여 /login 경로에 대한 POST 요청을 처리합니다.
처리: 사용자의 로그인 정보를 검증하고, 성공하거나 실패한 경우 적절한 리디렉션을 수행합니다.
결론
두 접근 방식은 각각의 목적에 맞게 설계되었습니다. 회원가입과 로그인 모두 서버에서 요청을 처리하는 방법이 다르지만, 전체 시스템에서 통합적으로 잘 작동합니다.

회원가입: 사용자 등록을 위한 커스텀 라우트를 정의하여 사용자의 정보를 데이터베이스에 저장합니다.
로그인: Passport를 사용하여 인증 로직을 처리하며, 인증된 후의 행동(성공/실패)을 처리합니다.
이 두 가지 접근 방식이 서로 다른 목적으로 사용되지만, 서버 측에서는 모두 통합되어 정상적으로 동작합니다. 이 방식으로 사용자 등록과 인증을 각각 처리하면 됩니다.
